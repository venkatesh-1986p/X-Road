#!/bin/bash

. /usr/share/debconf/confmodule

db_properties=/etc/xroad/db.properties


if [ -n "$DEBIAN_SCRIPT_DEBUG" ]; then set -v -x; DEBIAN_SCRIPT_TRACE=1; fi

${DEBIAN_SCRIPT_TRACE:+ echo "#42#DEBUG# RUNNING $0 $*" 1>&2 }


if [ "$1" = "upgrade" ];
 then
   if dpkg --compare-versions "$2" lt-nl "6.6"
      then echo -e "\n\ndirect upgrade from xroad-proxy<6.6 is not supported\n\n"
      exit 1
   fi
fi

if [ "$1" = "upgrade" ];
  then
    # allow-get-wsdl-request for upgrade installations
    proxy_ini=/etc/xroad/conf.d/proxy.ini
    local_ini=/etc/xroad/conf.d/local.ini
    present_in_proxy_ini=$(crudini --get ${proxy_ini} proxy allow-get-wsdl-request 2>/dev/null)
    if [[ -n "$present_in_proxy_ini" ]];
      then
        echo "allow-get-wsdl-request already present in proxy.ini, do not update local.ini"
      else
        echo "allow-get-wsdl-request not present in proxy.ini, update local.ini"
        crudini --set ${local_ini} proxy allow-get-wsdl-request true
      fi
fi

if [ "$1" = "upgrade" ];
  then
    # migrate from client-fastest-connecting-ssl-use-uri-cache to client-fastest-connecting-ssl-uri-cache-period
    local_ini=/etc/xroad/conf.d/local.ini
    local_ini_value=$(crudini --get ${local_ini} proxy client-fastest-connecting-ssl-use-uri-cache 2>/dev/null)
    if [[ -n "$local_ini_value" ]];
      then
        echo "client-fastest-connecting-ssl-use-uri-cache present in local.ini, perform migration to client-fastest-connecting-ssl-uri-cache-period"
        if [ "$local_ini_value" = true ] ;
          then
            echo "client-fastest-connecting-ssl-use-uri-cache=true, no action needed, use default value"
          else
            echo "client-fastest-connecting-ssl-use-uri-cache=false, set client-fastest-connecting-ssl-uri-cache-period=0"
            crudini --set ${local_ini} proxy client-fastest-connecting-ssl-uri-cache-period 0
          fi
        crudini --del ${local_ini} proxy client-fastest-connecting-ssl-use-uri-cache
      else
        echo "client-fastest-connecting-ssl-use-uri-cache not present in local.ini, use default value"
      fi
fi

function handle_error {
   ERR=$(</tmp/cert.err)
   db_subst xroad-common/cert-generation-error ERR "$(printf %s "$ERR" | debconf-escape -e)"
   db_input critical xroad-common/cert-generation-error
   db_go
   rm -f /tmp/cert.err
}

if  [ "$1" = "reconfigure" ];
  then
    db_fset xroad-common/database-host seen false
    db_fset xroad-common/admin-subject seen false
    db_fset xroad-common/admin-altsubject seen false
    db_fset xroad-common/service-subject seen false
    db_fset xroad-common/service-altsubject seen false
fi

# Get database connection string from the user
db_input critical xroad-common/database-host || true
db_go
RET=
db_get xroad-common/database-host
db_host="$RET"

#check certificates and request necessary subject information from user
HOST=`hostname -f`
LIST=
for i in `ip addr | grep 'scope global' | tr '/' ' ' | awk '{print $2}'`; do LIST+="IP:$i,"; done;
ALT=${LIST}DNS:`hostname`,DNS:`hostname -f`

while :; do
    if [[ ! -r /etc/xroad/ssl/nginx.crt || ! -r /etc/xroad/ssl/nginx.key ]]
    then
       echo "Generating new nginx.[crt|key] files "
       db_subst xroad-common/admin-subject HOST "$HOST"
       db_subst xroad-common/admin-altsubject ALT "$ALT"
       RET=
       db_get xroad-common/admin-subject
       if [ -z "$RET"  ]
       then
          db_set xroad-common/admin-subject "/CN=$HOST"
       fi
       RET=
       db_get xroad-common/admin-altsubject
       if [ -z "$RET"  ]
       then
          db_set xroad-common/admin-altsubject "$ALT"
       fi
       db_input critical xroad-common/admin-subject || true
       db_input critical xroad-common/admin-altsubject || true
       db_go
       RET=
       db_get xroad-common/admin-subject
       subj="$RET"
       RET=
       db_get xroad-common/admin-altsubject
       altn="$RET"
       db_go
       rm -f /etc/xroad/ssl/nginx.crt /etc/xroad/ssl/nginx.key
       echo "generating new webUI TLS key/certificate with $subj and $altn"
       /usr/share/xroad/scripts/generate_certificate.sh  -n nginx  -s "${subj}" -a "${altn}" 2>/tmp/cert.err || handle_error
    else
      break
    fi
done

while :; do
    if [[ ! -r /etc/xroad/ssl/internal.crt || ! -r /etc/xroad/ssl/internal.key  || ! -r /etc/xroad/ssl/internal.p12 ]]
    then
       echo "Generating new internal.[crt|key|p12] files "
       db_subst xroad-common/service-subject HOST "$HOST"
       db_subst xroad-common/service-altsubject ALT "$ALT"
       RET=
       db_get xroad-common/service-subject
       if [ -z "$RET"  ]
       then
          db_set xroad-common/service-subject "/CN=$HOST"
       fi
       RET=
       db_get xroad-common/service-altsubject
       if [ -z "$RET"  ]
       then
          db_set xroad-common/service-altsubject "$ALT"
       fi
       db_input critical xroad-common/service-subject || true
       db_input critical xroad-common/service-altsubject || true
       db_go
       RET=
       db_get xroad-common/service-subject
       subj="$RET"
       RET=
       db_get xroad-common/service-altsubject
       altn="$RET"
       db_go
       rm -f /etc/xroad/ssl/internal.crt /etc/xroad/ssl/internal.key /etc/xroad/ssl/internal.p12
       echo "generating new service TLS key/certificate with $subj and $altn"
       /usr/share/xroad/scripts/generate_certificate.sh  -n internal -s "${subj}" -a "${altn}" -p 2> /tmp/cert.err || handle_error
    else
      break
    fi
done


db_stop

