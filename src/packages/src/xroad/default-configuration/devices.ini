; This configuration file defines the available Secure Signature
; Creation Devices (SSCD).
;
; SSCD devices are configured as follows:
; [device_uid]
;   The UID of the device. It is used to identify the device in Server conf.
; enabled = BOOLEAN (optional, default: true)
;   Indicates whether this device is enabled.
; library = STRING
;   The path to the pkcs#11 library of the device driver.
; library_cant_create_os_threads = BOOLEAN (optional, default: false)
;   Indicates whether application threads, which are executing calls to the pkcs#11 library, may not use native
;   operating system calls to spawn new threads (in other words, the libraryâ€™s code may not create its own threads).
; os_locking_ok = BOOLEAN (optional, default: false)
;   Indicates whether the pkcs#11 library may use the native operation system threading model for locking.
; sign_verify_pin = BOOLEAN (optional, default: false)
;   Indicates whether the PIN should be entered per signing operation.
; token_id_format = STRING (optional, default: {moduleType}{slotIndex}{serialNumber}{label})
;   Specifies the identifier format used to uniquely identify a token. In certain high
;   availability setups may need be constrained to support replicated tokens (eg. by removing
;   the slot index part which may be diffirent for the token replicas).
; sign_mechanism = STRING (optional, default: CKM_RSA_PKCS)
;   Specifies the signing mechanism. Supported values: CKM_RSA_PKCS, CKM_RSA_PKCS_PSS.
; pub_key_attribute_encrypt = BOOLEAN (optional, default: true)
;   Indicates whether public key can be used for encryption.
; pub_key_attribute_verify = BOOLEAN (optional, default: true)
;   Indicates whether public key can be used for verification.
; pub_key_attribute_wrap = BOOLEAN (optional)
;   Indicates whether public key can be used for wrapping other keys.
; pub_key_attribute_allowed_mechanisms = STRING LIST (optional, string separator is ",")
;   Specifies public key allowed mechanisms. Supported values:
;   CKM_RSA_PKCS, CKM_SHA256_RSA_PKCS, CKM_SHA384_RSA_PKCS, CKM_SHA512_RSA_PKCS, and
;   CKM_RSA_PKCS_PSS, CKM_SHA256_RSA_PKCS_PSS, CKM_SHA384_RSA_PKCS_PSS, CKM_SHA512_RSA_PKCS_PSS.
; priv_key_attribute_sensitive = BOOLEAN (optional, default: true)
;   Indicates whether private key is sensitive.
; priv_key_attribute_decrypt = BOOLEAN (optional, default: true)
;   Indicates whether private key can be used for encryption.
; priv_key_attribute_sign = BOOLEAN (optional, default: true)
;   Indicates whether private key can be used for signing.
; priv_key_attribute_unwrap = BOOLEAN (optional)
;   Indicates whether private key can be used for unwrapping wrapped keys.
; priv_key_attribute_allowed_mechanisms = STRING LIST (optional, string separator is ",")
;   Specifies private key allowed mechanisms. Supported values:
;   CKM_RSA_PKCS, CKM_SHA256_RSA_PKCS, CKM_SHA384_RSA_PKCS, CKM_SHA512_RSA_PKCS, and
;   CKM_RSA_PKCS_PSS, CKM_SHA256_RSA_PKCS_PSS, CKM_SHA384_RSA_PKCS_PSS, CKM_SHA512_RSA_PKCS_PSS.
; slot_ids = UNSIGNED INTEGER LIST (optional, separator is ",")
;   Specifies the device slot configuration. The value of the parameter is comma separated list of slot ids to use
;   e.g. 1123, 2342, 5345. The default slot configuration for each HSM device is empty which means that all the slots
;   will be scanned by the Security Server.

;[hsm_ncipher]
;library = libcknfast.so

;[hsm_utimaco_se52]
;library = /usr/local/lib/libcs_pkcs11_R2.so
;token_id_format = {moduleType}{slotIndex}{label}

;[hsm_utimaco_se52_fips]
;library = /usr/local/lib/libcs_pkcs11_R2.so
;token_id_format = {moduleType}{slotIndex}{label}
;sign_mechanism = CKM_RSA_PKCS_PSS
;pub_key_attribute_encrypt = false
;pub_key_attribute_wrap = false
;pub_key_attribute_allowed_mechanisms = CKM_RSA_PKCS_PSS, CKM_SHA256_RSA_PKCS_PSS, CKM_SHA384_RSA_PKCS_PSS, CKM_SHA512_RSA_PKCS_PSS
;priv_key_attribute_decrypt = false
;priv_key_attribute_unwrap = false
;priv_key_attribute_allowed_mechanisms = CKM_RSA_PKCS_PSS, CKM_SHA256_RSA_PKCS_PSS, CKM_SHA384_RSA_PKCS_PSS, CKM_SHA512_RSA_PKCS_PSS

;[smartcard]
;library = opensc-pkcs11.so
;sign_verify_pin = true

;[etoken]
;library = /usr/local/lib/libeToken.so.9.0.43
